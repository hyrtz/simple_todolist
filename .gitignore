

// Updated TaskItem.cs with validation
using System.ComponentModel.DataAnnotations;

namespace TaskApp.Models;

public class TaskItem
{
    public int Id { get; set; }

    [Required(ErrorMessage = "Task name is required")]
    public string TaskName { get; set; }

    public string Priority { get; set; }

    public string Category { get; set; }
}

// Updated HomeController.cs with form-based edit/delete alternatives
using System.Diagnostics;
using Microsoft.AspNetCore.Mvc;
using TaskApp.Models;

namespace TaskApp.Controllers;

public class HomeController : Controller
{
    private readonly ApplicationDbContext _context;

    public HomeController(ApplicationDbContext context)
    {
        _context = context;
    }

    public IActionResult Index()
    {
        ViewData["mydata"] = "Tasks";
        var tasks = _context.TaskItems.ToList();
        return View(tasks);
    }

    [HttpPost]
    [ValidateAntiForgeryToken]
    public IActionResult Create(TaskItem task)
    {
        if (ModelState.IsValid)
        {
            _context.TaskItems.Add(task);
            _context.SaveChanges();
            return RedirectToAction("Index");
        }

        var tasks = _context.TaskItems.ToList();
        return View("Index", tasks);
    }

    [HttpPost]
    [ValidateAntiForgeryToken]
    public IActionResult Edit(TaskItem updatedTask)
    {
        if (ModelState.IsValid && updatedTask != null)
        {
            var existing = _context.TaskItems.Find(updatedTask.Id);
            if (existing != null)
            {
                existing.TaskName = updatedTask.TaskName;
                existing.Priority = updatedTask.Priority;
                existing.Category = updatedTask.Category;
                _context.SaveChanges();
                return RedirectToAction("Index");
            }
        }
        return BadRequest();
    }

    [HttpPost]
    [ValidateAntiForgeryToken]
    public IActionResult Delete(int id)
    {
        var task = _context.TaskItems.Find(id);
        if (task != null)
        {
            _context.TaskItems.Remove(task);
            _context.SaveChanges();
        }

        return RedirectToAction("Index");
    }

    public IActionResult Privacy()
    {
        return View();
    }

    [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]
    public IActionResult Error()
    {
        return View(new ErrorViewModel { RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier });
    }
}










localhost:5252 says
Failed to save task: Invalid task data 


V1 index.cshtml: 

@{
    ViewData["Title"] = "To Do List";
}

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css"/>
<link rel="stylesheet" href="/wwwroot/js/site.js"/> 

<h2>@ViewData["mydata"]</h2>

<div class="list-holder">
    @* sample task and add task  *@
    <div id="task-template" class="section" style="display: none;">
        <button class="icon">
            <span class="fa-regular fa-circle" aria-hidden="true"></span>
        </button>
        <div class="task-list-item-content">
            <input type="text" class="task-input"/>
        </div>

        <div class="task-bttns">
            <button class="bttn" type="button">Priority</button>
            <button class="bttn" type="button">Category</button>
            <button class="bttn" type="button">Hide</button>
            <button id="del-bttn" class="bttn" type="button">Delete</button>
        </div>
    </div>

     <!-- Where Tasks Will Be Added -->
    <div id="task-container"></div>


    @* ADD TASK BUTTON *@
    <div id="add-task" class="section" onclick="addTask()">
        <button class="icon">
            <span class="fa-solid fa-circle-plus" aria-hidden="true"></span>
        </button>
        <div class="task-list-item-content">
            <div class="task-content">Add Task</div>
        </div>
    </div>
</div>
    
<div class="side-bar">
</div>





V1 HomeController.cs:
using System.Diagnostics;
using Microsoft.AspNetCore.Mvc;
using TaskApp.Models;

namespace TaskApp.Controllers;

public class HomeController : Controller
{

    public IActionResult Privacy()
    {
        return View();
    }

    private readonly ApplicationDbContext _context;

    public HomeController(ApplicationDbContext context)
    {
        _context = context;
    }

    // GET: Display the form to the user
    public IActionResult Create()
    {
        return View();
    }

    [HttpPost]
    [ValidateAntiForgeryToken]
    public IActionResult Create(TaskItem user)
    {
        if (ModelState.IsValid)
        {
            // Add to database
            _context.TaskItems.Add(user);
            _context.SaveChanges();
            
            // Redirect to a success page or index
            return RedirectToAction("Index");
        }
        // If validation fails, return the form again
        return View(user);
    }

    // GET: Display list of users
    public IActionResult Index()
    {
        ViewData["mydata"] = "Tasks";
        var users = _context.TaskItems.ToList();
        return View(users);
    }

    

    [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]
    public IActionResult Error()
    {
        return View(new ErrorViewModel { RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier });
    }
}





V1 site.css:
@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@500;600;700;800&display=swap');

html {
  font-size: 14px;
}

h2 {
  font-family: Poppins;
  font-weight: 600;
  font-size: 44px;
  color: #364BE9;
  margin-bottom: 2rem;
}


h2, .list-holder {
  padding-left: 10rem;
  position: relative;
}

.section {
    border-bottom: 1px solid #E6E6E6;
    width: 100%;
    margin-top: 1rem;
    margin-bottom: 1rem;
    padding: 1%;

}

.icon {
  border: none;
  position: absolute;
  padding: -1rem;
  background-color: transparent;
  margin-bottom: 1rem;
}

.task-list-item-content {
  margin-left: 2.4rem;
  font-family: Poppins;
  margin-bottom: .6rem;
}


#add-task {
  color: #808080;
  font-weight: 500;
  border: none;
  transition: ease .4s;
}

#add-task:hover {
  color: #364BE9;
  border: none;
  transition: ease .4s;
}


span {
  color: #BDBDBD;
  font-size: 1.2rem;
}

.fa-solid {
  color: #808080;
  font-size: 1.4rem;
}


.fa-solid:hover {
  color: #364BE9;
  border: none;
  transition: ease .4s;
}

.bttn {
  color: #7B7B7B;
  font-family: Poppins;
  background-color: #F5F5F5;
  border-radius: 6px;
  width: 6rem;
  border: none;
  margin: 1%;
  padding: 4px;
  
}

.category {
  display: inline-block;
}


.side-bar {
  width: 237px; 
  height: 1024px; 
  left: 0px; 
  top: 0px; 
  position: fixed; 
  background: #E9E9E9; 
  border-right: 0.80px #BDBDBD solid
}

.task-input {
    width: 100%;
    font-size: 16px;
    padding: 4px;
    outline: none;
    border: none;
}

#del-bttn {
  background-color: #FE3A30;
  color: #ffffff;
}



body {
  position: relative;
  min-height: 100%;
} 


/* @media (min-width: 768px) {
  html {
    font-size: 16px;
  }
}

.btn:focus, .btn:active:focus, .btn-link.nav-link:focus, .form-control:focus, .form-check-input:focus {
  box-shadow: 0 0 0 0.1rem white, 0 0 0 0.25rem #258cfb;
}


body {
  margin-bottom: 60px;
}

.form-floating > .form-control-plaintext::placeholder, .form-floating > .form-control::placeholder {
  color: var(--bs-secondary-color);
  text-align: end;
}

.form-floating > .form-control-plaintext:focus::placeholder, .form-floating > .form-control:focus::placeholder {
  text-align: start;
} */